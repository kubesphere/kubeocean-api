/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubesphere/kubeocean-api/apis/clusterapiproviderqc/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QCClusterLister helps list QCClusters.
// All objects returned here must be treated as read-only.
type QCClusterLister interface {
	// List lists all QCClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.QCCluster, err error)
	// QCClusters returns an object that can list and get QCClusters.
	QCClusters(namespace string) QCClusterNamespaceLister
	QCClusterListerExpansion
}

// qCClusterLister implements the QCClusterLister interface.
type qCClusterLister struct {
	indexer cache.Indexer
}

// NewQCClusterLister returns a new QCClusterLister.
func NewQCClusterLister(indexer cache.Indexer) QCClusterLister {
	return &qCClusterLister{indexer: indexer}
}

// List lists all QCClusters in the indexer.
func (s *qCClusterLister) List(selector labels.Selector) (ret []*v1beta1.QCCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.QCCluster))
	})
	return ret, err
}

// QCClusters returns an object that can list and get QCClusters.
func (s *qCClusterLister) QCClusters(namespace string) QCClusterNamespaceLister {
	return qCClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QCClusterNamespaceLister helps list and get QCClusters.
// All objects returned here must be treated as read-only.
type QCClusterNamespaceLister interface {
	// List lists all QCClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.QCCluster, err error)
	// Get retrieves the QCCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.QCCluster, error)
	QCClusterNamespaceListerExpansion
}

// qCClusterNamespaceLister implements the QCClusterNamespaceLister
// interface.
type qCClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all QCClusters in the indexer for a given namespace.
func (s qCClusterNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.QCCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.QCCluster))
	})
	return ret, err
}

// Get retrieves the QCCluster from the indexer for a given namespace and name.
func (s qCClusterNamespaceLister) Get(name string) (*v1beta1.QCCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("qccluster"), name)
	}
	return obj.(*v1beta1.QCCluster), nil
}
