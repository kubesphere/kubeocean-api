/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubesphere/kubeocean-api/apis/clusterapiproviderqc/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QCMachineLister helps list QCMachines.
// All objects returned here must be treated as read-only.
type QCMachineLister interface {
	// List lists all QCMachines in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.QCMachine, err error)
	// QCMachines returns an object that can list and get QCMachines.
	QCMachines(namespace string) QCMachineNamespaceLister
	QCMachineListerExpansion
}

// qCMachineLister implements the QCMachineLister interface.
type qCMachineLister struct {
	indexer cache.Indexer
}

// NewQCMachineLister returns a new QCMachineLister.
func NewQCMachineLister(indexer cache.Indexer) QCMachineLister {
	return &qCMachineLister{indexer: indexer}
}

// List lists all QCMachines in the indexer.
func (s *qCMachineLister) List(selector labels.Selector) (ret []*v1beta1.QCMachine, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.QCMachine))
	})
	return ret, err
}

// QCMachines returns an object that can list and get QCMachines.
func (s *qCMachineLister) QCMachines(namespace string) QCMachineNamespaceLister {
	return qCMachineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QCMachineNamespaceLister helps list and get QCMachines.
// All objects returned here must be treated as read-only.
type QCMachineNamespaceLister interface {
	// List lists all QCMachines in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.QCMachine, err error)
	// Get retrieves the QCMachine from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.QCMachine, error)
	QCMachineNamespaceListerExpansion
}

// qCMachineNamespaceLister implements the QCMachineNamespaceLister
// interface.
type qCMachineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all QCMachines in the indexer for a given namespace.
func (s qCMachineNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.QCMachine, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.QCMachine))
	})
	return ret, err
}

// Get retrieves the QCMachine from the indexer for a given namespace and name.
func (s qCMachineNamespaceLister) Get(name string) (*v1beta1.QCMachine, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("qcmachine"), name)
	}
	return obj.(*v1beta1.QCMachine), nil
}
