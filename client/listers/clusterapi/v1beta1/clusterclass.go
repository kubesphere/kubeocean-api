/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubesphere/kubeocean-api/apis/clusterapi/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterClassLister helps list ClusterClasses.
// All objects returned here must be treated as read-only.
type ClusterClassLister interface {
	// List lists all ClusterClasses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ClusterClass, err error)
	// ClusterClasses returns an object that can list and get ClusterClasses.
	ClusterClasses(namespace string) ClusterClassNamespaceLister
	ClusterClassListerExpansion
}

// clusterClassLister implements the ClusterClassLister interface.
type clusterClassLister struct {
	indexer cache.Indexer
}

// NewClusterClassLister returns a new ClusterClassLister.
func NewClusterClassLister(indexer cache.Indexer) ClusterClassLister {
	return &clusterClassLister{indexer: indexer}
}

// List lists all ClusterClasses in the indexer.
func (s *clusterClassLister) List(selector labels.Selector) (ret []*v1beta1.ClusterClass, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ClusterClass))
	})
	return ret, err
}

// ClusterClasses returns an object that can list and get ClusterClasses.
func (s *clusterClassLister) ClusterClasses(namespace string) ClusterClassNamespaceLister {
	return clusterClassNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterClassNamespaceLister helps list and get ClusterClasses.
// All objects returned here must be treated as read-only.
type ClusterClassNamespaceLister interface {
	// List lists all ClusterClasses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ClusterClass, err error)
	// Get retrieves the ClusterClass from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ClusterClass, error)
	ClusterClassNamespaceListerExpansion
}

// clusterClassNamespaceLister implements the ClusterClassNamespaceLister
// interface.
type clusterClassNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterClasses in the indexer for a given namespace.
func (s clusterClassNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ClusterClass, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ClusterClass))
	})
	return ret, err
}

// Get retrieves the ClusterClass from the indexer for a given namespace and name.
func (s clusterClassNamespaceLister) Get(name string) (*v1beta1.ClusterClass, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("clusterclass"), name)
	}
	return obj.(*v1beta1.ClusterClass), nil
}
