/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubesphere/kubeocean-api/apis/bootstrap/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubeadmConfigLister helps list KubeadmConfigs.
// All objects returned here must be treated as read-only.
type KubeadmConfigLister interface {
	// List lists all KubeadmConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.KubeadmConfig, err error)
	// KubeadmConfigs returns an object that can list and get KubeadmConfigs.
	KubeadmConfigs(namespace string) KubeadmConfigNamespaceLister
	KubeadmConfigListerExpansion
}

// kubeadmConfigLister implements the KubeadmConfigLister interface.
type kubeadmConfigLister struct {
	indexer cache.Indexer
}

// NewKubeadmConfigLister returns a new KubeadmConfigLister.
func NewKubeadmConfigLister(indexer cache.Indexer) KubeadmConfigLister {
	return &kubeadmConfigLister{indexer: indexer}
}

// List lists all KubeadmConfigs in the indexer.
func (s *kubeadmConfigLister) List(selector labels.Selector) (ret []*v1beta1.KubeadmConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KubeadmConfig))
	})
	return ret, err
}

// KubeadmConfigs returns an object that can list and get KubeadmConfigs.
func (s *kubeadmConfigLister) KubeadmConfigs(namespace string) KubeadmConfigNamespaceLister {
	return kubeadmConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubeadmConfigNamespaceLister helps list and get KubeadmConfigs.
// All objects returned here must be treated as read-only.
type KubeadmConfigNamespaceLister interface {
	// List lists all KubeadmConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.KubeadmConfig, err error)
	// Get retrieves the KubeadmConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.KubeadmConfig, error)
	KubeadmConfigNamespaceListerExpansion
}

// kubeadmConfigNamespaceLister implements the KubeadmConfigNamespaceLister
// interface.
type kubeadmConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubeadmConfigs in the indexer for a given namespace.
func (s kubeadmConfigNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.KubeadmConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KubeadmConfig))
	})
	return ret, err
}

// Get retrieves the KubeadmConfig from the indexer for a given namespace and name.
func (s kubeadmConfigNamespaceLister) Get(name string) (*v1beta1.KubeadmConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("kubeadmconfig"), name)
	}
	return obj.(*v1beta1.KubeadmConfig), nil
}
