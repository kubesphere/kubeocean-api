/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubesphere/kubeocean-api/apis/controlplane/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubeadmControlPlaneTemplateLister helps list KubeadmControlPlaneTemplates.
// All objects returned here must be treated as read-only.
type KubeadmControlPlaneTemplateLister interface {
	// List lists all KubeadmControlPlaneTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.KubeadmControlPlaneTemplate, err error)
	// KubeadmControlPlaneTemplates returns an object that can list and get KubeadmControlPlaneTemplates.
	KubeadmControlPlaneTemplates(namespace string) KubeadmControlPlaneTemplateNamespaceLister
	KubeadmControlPlaneTemplateListerExpansion
}

// kubeadmControlPlaneTemplateLister implements the KubeadmControlPlaneTemplateLister interface.
type kubeadmControlPlaneTemplateLister struct {
	indexer cache.Indexer
}

// NewKubeadmControlPlaneTemplateLister returns a new KubeadmControlPlaneTemplateLister.
func NewKubeadmControlPlaneTemplateLister(indexer cache.Indexer) KubeadmControlPlaneTemplateLister {
	return &kubeadmControlPlaneTemplateLister{indexer: indexer}
}

// List lists all KubeadmControlPlaneTemplates in the indexer.
func (s *kubeadmControlPlaneTemplateLister) List(selector labels.Selector) (ret []*v1beta1.KubeadmControlPlaneTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KubeadmControlPlaneTemplate))
	})
	return ret, err
}

// KubeadmControlPlaneTemplates returns an object that can list and get KubeadmControlPlaneTemplates.
func (s *kubeadmControlPlaneTemplateLister) KubeadmControlPlaneTemplates(namespace string) KubeadmControlPlaneTemplateNamespaceLister {
	return kubeadmControlPlaneTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubeadmControlPlaneTemplateNamespaceLister helps list and get KubeadmControlPlaneTemplates.
// All objects returned here must be treated as read-only.
type KubeadmControlPlaneTemplateNamespaceLister interface {
	// List lists all KubeadmControlPlaneTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.KubeadmControlPlaneTemplate, err error)
	// Get retrieves the KubeadmControlPlaneTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.KubeadmControlPlaneTemplate, error)
	KubeadmControlPlaneTemplateNamespaceListerExpansion
}

// kubeadmControlPlaneTemplateNamespaceLister implements the KubeadmControlPlaneTemplateNamespaceLister
// interface.
type kubeadmControlPlaneTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubeadmControlPlaneTemplates in the indexer for a given namespace.
func (s kubeadmControlPlaneTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.KubeadmControlPlaneTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KubeadmControlPlaneTemplate))
	})
	return ret, err
}

// Get retrieves the KubeadmControlPlaneTemplate from the indexer for a given namespace and name.
func (s kubeadmControlPlaneTemplateNamespaceLister) Get(name string) (*v1beta1.KubeadmControlPlaneTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("kubeadmcontrolplanetemplate"), name)
	}
	return obj.(*v1beta1.KubeadmControlPlaneTemplate), nil
}
