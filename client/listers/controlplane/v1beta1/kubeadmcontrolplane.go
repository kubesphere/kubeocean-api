/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubesphere/kubeocean-api/apis/controlplane/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubeadmControlPlaneLister helps list KubeadmControlPlanes.
// All objects returned here must be treated as read-only.
type KubeadmControlPlaneLister interface {
	// List lists all KubeadmControlPlanes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.KubeadmControlPlane, err error)
	// KubeadmControlPlanes returns an object that can list and get KubeadmControlPlanes.
	KubeadmControlPlanes(namespace string) KubeadmControlPlaneNamespaceLister
	KubeadmControlPlaneListerExpansion
}

// kubeadmControlPlaneLister implements the KubeadmControlPlaneLister interface.
type kubeadmControlPlaneLister struct {
	indexer cache.Indexer
}

// NewKubeadmControlPlaneLister returns a new KubeadmControlPlaneLister.
func NewKubeadmControlPlaneLister(indexer cache.Indexer) KubeadmControlPlaneLister {
	return &kubeadmControlPlaneLister{indexer: indexer}
}

// List lists all KubeadmControlPlanes in the indexer.
func (s *kubeadmControlPlaneLister) List(selector labels.Selector) (ret []*v1beta1.KubeadmControlPlane, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KubeadmControlPlane))
	})
	return ret, err
}

// KubeadmControlPlanes returns an object that can list and get KubeadmControlPlanes.
func (s *kubeadmControlPlaneLister) KubeadmControlPlanes(namespace string) KubeadmControlPlaneNamespaceLister {
	return kubeadmControlPlaneNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubeadmControlPlaneNamespaceLister helps list and get KubeadmControlPlanes.
// All objects returned here must be treated as read-only.
type KubeadmControlPlaneNamespaceLister interface {
	// List lists all KubeadmControlPlanes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.KubeadmControlPlane, err error)
	// Get retrieves the KubeadmControlPlane from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.KubeadmControlPlane, error)
	KubeadmControlPlaneNamespaceListerExpansion
}

// kubeadmControlPlaneNamespaceLister implements the KubeadmControlPlaneNamespaceLister
// interface.
type kubeadmControlPlaneNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubeadmControlPlanes in the indexer for a given namespace.
func (s kubeadmControlPlaneNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.KubeadmControlPlane, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KubeadmControlPlane))
	})
	return ret, err
}

// Get retrieves the KubeadmControlPlane from the indexer for a given namespace and name.
func (s kubeadmControlPlaneNamespaceLister) Get(name string) (*v1beta1.KubeadmControlPlane, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("kubeadmcontrolplane"), name)
	}
	return obj.(*v1beta1.KubeadmControlPlane), nil
}
