/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v2alpha1

import (
	v2alpha1 "github.com/kubesphere/kubeocean-api/v2/apis/kubeocean/v2alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExposedServiceLister helps list ExposedServices.
// All objects returned here must be treated as read-only.
type ExposedServiceLister interface {
	// List lists all ExposedServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v2alpha1.ExposedService, err error)
	// ExposedServices returns an object that can list and get ExposedServices.
	ExposedServices(namespace string) ExposedServiceNamespaceLister
	ExposedServiceListerExpansion
}

// exposedServiceLister implements the ExposedServiceLister interface.
type exposedServiceLister struct {
	indexer cache.Indexer
}

// NewExposedServiceLister returns a new ExposedServiceLister.
func NewExposedServiceLister(indexer cache.Indexer) ExposedServiceLister {
	return &exposedServiceLister{indexer: indexer}
}

// List lists all ExposedServices in the indexer.
func (s *exposedServiceLister) List(selector labels.Selector) (ret []*v2alpha1.ExposedService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v2alpha1.ExposedService))
	})
	return ret, err
}

// ExposedServices returns an object that can list and get ExposedServices.
func (s *exposedServiceLister) ExposedServices(namespace string) ExposedServiceNamespaceLister {
	return exposedServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExposedServiceNamespaceLister helps list and get ExposedServices.
// All objects returned here must be treated as read-only.
type ExposedServiceNamespaceLister interface {
	// List lists all ExposedServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v2alpha1.ExposedService, err error)
	// Get retrieves the ExposedService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v2alpha1.ExposedService, error)
	ExposedServiceNamespaceListerExpansion
}

// exposedServiceNamespaceLister implements the ExposedServiceNamespaceLister
// interface.
type exposedServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExposedServices in the indexer for a given namespace.
func (s exposedServiceNamespaceLister) List(selector labels.Selector) (ret []*v2alpha1.ExposedService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v2alpha1.ExposedService))
	})
	return ret, err
}

// Get retrieves the ExposedService from the indexer for a given namespace and name.
func (s exposedServiceNamespaceLister) Get(name string) (*v2alpha1.ExposedService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v2alpha1.Resource("exposedservice"), name)
	}
	return obj.(*v2alpha1.ExposedService), nil
}
